# 📚 **Full Understanding of Medical Appointment Scheduling System**

---

## 🎯 **Project Concept**
This project is a **web-based system** that allows **patients** to register, login, and book appointments with doctors. **Admins** can manage all users, doctors, and appointments. The system will work without a database and instead use **file handling (patients.txt, doctors.txt, appointments.txt)** to store data.  

✅ Developed using:  
- **Java (Core Backend + Servlets + OOP)**
- **JSP (Frontend Pages)**
- **File Handling (Data Storage)**
- **Priority Queue** (for emergency appointment handling - critical patients get scheduled first)
- **Bubble Sort** (to sort appointments by date/time for admin view)

---

## 📂 **Final Project Folder Structure (with Explanation)**

```text
📁 MedicalAppointmentSystem
│── 📁 src
│   ├── 📁 main
│   │   ├── 📁 java                        # All backend logic (MVC style)
│   │   │   ├── 📁 model                   # Data/Entity Classes (Encapsulation + OOP)
│   │   │   │   ├── Patient.java           # Patient details (id, name, age, etc.)
│   │   │   │   ├── Doctor.java            # Doctor details (name, specialization)
│   │   │   │   ├── Appointment.java       # Appointment object (priority, time, doctor, patient)
│   │   │   ├── 📁 service                  # Business Logic Layer
│   │   │   │   ├── AppointmentService.java # Appointment scheduling & sorting (Bubble Sort)
│   │   │   │   ├── FileHandler.java        # All file read/write CRUD methods
│   │   │   ├── 📁 controller               # Servlets (Handles HTTP Requests)
│   │   │   │   ├── LoginServlet.java       # Handles user/admin login
│   │   │   │   ├── RegisterServlet.java    # Handles patient registration
│   │   │   │   ├── AppointmentServlet.java # Handles booking/canceling
│   │   │   │   ├── AdminServlet.java       # Admin dashboard (view/manage data)
│   │   │   │   ├── DoctorServlet.java      # Optional - If doctor login needed
│   │   ├── 📁 webapp                       # All frontend files (UI Pages + Data)
│   │   │   ├── 📁 pages                    # All JSP Pages
│   │   │   │   ├── index.jsp               # Home page (like The Odin Project)
│   │   │   │   ├── login.jsp               # Combined Login page (User/Admin)
│   │   │   │   ├── dashboard.jsp           # Admin Dashboard
│   │   │   │   ├── doctorDashboard.jsp     # Doctor Dashboard (if needed)
│   │   │   │   ├── appointment.jsp         # Appointment Booking Page
│   │   │   │   ├── profile.jsp             # Patient profile (view appointments)
│   │   │   │   ├── error.jsp                # Display errors (invalid login, etc.)
|   |   |   |   |---register.jsp             # register doctors and users
│   │   │   ├── 📁 assets                    # Static files (CSS, JS, Images)
│   │   │   │   ├── styles.css               # Custom styles
│   │   │   │   ├── script.js                 # Optional JS
│   │   │   │   ├── logo.png                  # System Logo (if needed)
│   │   │   ├── WEB-INF
│   │   │   │   ├── web.xml                   # Servlet Mappings
│   │   │   ├── 📁 data                      # All system data (stored in plain files)
│   │   │   │   ├── patients.txt              # Patient records
│   │   │   │   ├── doctors.txt               # Doctor records
│   │   │   │   ├── appointments.txt          # Appointments
│   │   │   │   ├── admins.txt                 # Admin credentials (username/password)
│── 📁 target                               # Maven build output (ignore)
│── 📄 pom.xml                              # Maven Config (dependencies)
│── 📄 README.md                            # Project description
│── 📄 report.pdf                           # Final documentation (diagrams + Git log)
│── 📄 .gitignore                           # Ignore files like target/, .idea/
```

---

## 🔐 **Roles and Permissions**
| Role | Permissions |
|---|---|
| **Admin** | Manage doctors, view all appointments, add/edit/remove doctors, view patients |
| **Doctor** | View personal schedule (optional) |
| **Patient** | Register, login, book appointment, cancel appointment, view own history |

---

## 📋 **Core Features**
### ✅ Admin
- Login
- Add/Edit/Remove doctors
- View all appointments (sorted by time)
- Search appointments by patient name/date
- Manage critical/emergency queue

### ✅ Patient
- Register & Login
- Update profile
- Book appointment (select doctor + date/time)
- Cancel appointment
- View appointment history

### ✅ Appointment Scheduling (Backend Logic)
- Priority Queue: Critical patients are prioritized
- Sorting: Bubble sort used to order appointments by time
- File Handling: Everything saved in text files

---

## 💻 **Technical Details**
| Component | Tech/Concept |
|---|---|
| Backend | Java (OOP, Servlets) |
| Frontend | JSP + CSS (with optional Bootstrap) |
| Storage | File Handling (patients.txt, doctors.txt, appointments.txt) |
| Algorithms | Priority Queue (for urgency), Bubble Sort (for time order) |
| Hosting | Smart Tomcat 10.1 (deployed from IntelliJ) |
| Build Tool | Maven (pom.xml) | junit3.8.1

---

## 📑 **Class Diagram (Basic Example)**

```text
+------------------+
| Patient          |
|------------------|
| String id        |
| String name      |
| int age          |
| String contact   |
+------------------+

+------------------+
| Doctor           |
|------------------|
| String id        |
| String name      |
| String specialty |
+------------------+

+------------------+
| Appointment      |
|------------------|
| String appointmentId |
| Patient patient      |
| Doctor doctor        |
| String date          |
| int priority         |
+------------------+

+------------------+
| AppointmentService |
|------------------|
| addAppointment()   |
| sortAppointments() |
| readFromFile()     |
| writeToFile()      |
+------------------+

+------------------+
| FileHandler       |
|------------------|
| savePatients()   |
| loadPatients()   |
| saveDoctors()    |
| loadDoctors()    |
+------------------+
```

---

## 📊 **Project Flow (Example)**

1️⃣ **Home Page (`index.jsp`)**  
   → Explains System  
   → Links to Login/Register

2️⃣ **Login (`login.jsp`)**  
   → Enter Credentials  
   → Role Redirect:
   - Patient ➡️ Profile Page
   - Admin ➡️ Dashboard
   - Doctor ➡️ Doctor Dashboard

3️⃣ **Patient Profile (`profile.jsp`)**  
   → View past/future appointments  
   → Book new appointment (choose doctor + time)

4️⃣ **Admin Dashboard (`dashboard.jsp`)**  
   → View/Edit doctors  
   → View all appointments (sorted)

---

## 📋 Final Checklist
✅ OOP (Encapsulation, Polymorphism, Inheritance)  
✅ CRUD (Add/Edit/Delete doctors, patients, appointments)  
✅ File Handling for Data Storage  
✅ User-Friendly UI (JSP with Bootstrap/CSS)
✅ Algorithms (Priority Queue + Bubble Sort)  
✅ GitHub Repo with Commit History  
✅ Final Report (Class Diagrams, Git Log)

